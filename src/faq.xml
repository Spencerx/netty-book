<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Copyright 2011 The Netty Project
 *
 * The Netty Project licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
-->
<!DOCTYPE preface SYSTEM "../lib/schema-5.1b4/dtd/docbook.dtd" [
<!ENTITY % Entities SYSTEM "dtds/entities.dtd">
%Entities;
]>
<preface xmlns="http://docbook.org/ns/docbook"
         xml:id="faq">
  <title>Frequently Asked Questions</title>

  <para>
     This FAQ is a summary of question and answers from <link xlink:href="http://stackoverflow.com/questions/tagged/netty?sort=faq">
     StackOverflow</link>.
  </para>

  <section>
    <title>When can I write outbound data?</title>
    <para>
      As long as you have the reference to the Channel (or ChannelHandlerContext), you can call Channel.write() 
      (or ChannelHandlerContext.write()) from anywhere, any thread.
    </para>
    <para>
       See <link xlink:href="http://stackoverflow.com/questions/3222134/how-does-downstream-events-work-in-jbosss-netty">
       discussion</link>.
    </para>
  </section>
  <section>
    <title>How do I incorporate my blocking application code with the non-blocking &NioEventLoopGroup;?</title>
    <para>
      &NioEventLoopGroup; contains n Threads that handle the IO of all the registered &Channel;s.
    </para>
    <para>
      If your applicaiton's handler blocks such as (reading from a database) or is CPU intensive, the worker thread 
      pool maybe exhausted and performance will degrade.
    </para>
    <para>
      We recommend that you implement your blocking application code in another thread pool.  You can do this by adding
      your handler with an extra &EventExecutor; to the &ChannelPipeline;.
    </para>
    <programlisting>public static void main(String[] args) throws Exception {
        final EventExecutor executor = new DefaultEventExecutor(8);

        ServerBootstrap bootstrap = new ServerBootstrap();
        bootstrap.group(new NioEventLoopGroup(), new NioEventLoopGroup());
        bootstrap.childHandler(new ChannelInitializer&lt;Channel&gt;() {
            @Override
            public void initChannel(Channel channel) {
                ChannelPipeline pipeline = channel.pipeline();
                pipeline.addLast("decoder", new HttpRequestDecoder());
                pipeline.addLast("aggregator", new HttpChunkAggregator(65536));
                pipeline.addLast("encoder", new HttpResponseEncoder());
                pipeline.addLast("chunkedWriter", new ChunkedWriteHandler());
                
                // MyHandler contains code that blocks so add it with the
                // EventExecutor to the pipeline.
                pipeline.addLast(executor, "handler", new MyHandler());        
            }
        });
        ...

        sb.bind(socketAddress);
        
        // Other code

    }
    
    
    public class MyHandler extends SimpleChannelUpstreamHandler {
        // Your blocking application code
}</programlisting> 
  </section> 
  <section>
    <title>Do I need to synchronize my handler code given that events can happen at the same time?</title>
    <para>
      To make it short, NO! Netty will take care to make sure all your ChannelHandlers will be executed 
      by only one Thread at the same time.
    </para>
  </section>
  
  <section>
    <title>How do I pass data between handlers in the same Channel?</title>
    <para>
      Use Channel.attr(..).set(...) to store the reference. Please refer to the apidocs for more informations. 
    </para>
  </section>
</preface>
